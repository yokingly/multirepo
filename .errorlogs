# Error Logs

[LOW] [BUILD] [frontend] TypeScript configuration warning
- Error Message: Cannot find type definition file for 'node'.
- Occurrence Count: 1
- Context: Initial Next.js TypeScript setup in Docker container
- Attempted Fixes:
  1. Added @types/node to dependencies
  2. Updated Docker build context
- Resolution: Installed @types/node as dev dependency and updated Dockerfile

[MEDIUM] [BUILD] [backend] NestJS build error
- Error Message: Cannot find module '@nestjs/core'
- Occurrence Count: 1
- Context: Initial NestJS application setup in Docker container
- Attempted Fixes:
  1. Cleared node_modules and package-lock.json
  2. Ran npm install
  3. Rebuilt Docker container
- Resolution: Fixed by updating Dockerfile and reinstalling dependencies

[LOW] [LINT] [frontend] ESLint configuration warning
- Error Message: Unable to resolve path to module '@/components'
- Occurrence Count: 2
- Context: Setting up TypeScript path aliases in Docker environment
- Attempted Fixes:
  1. Updated tsconfig.json paths
  2. Updated eslint configuration
  3. Modified Docker volume mounts
- Resolution: Added proper path resolution in both tsconfig.json and eslint config

[MEDIUM] [BUILD] [docker] Container build failure
- Error Message: Error response from daemon: Container not found
- Occurrence Count: 1
- Context: Initial Docker network bridge setup
- Attempted Fixes:
  1. Verified container names in docker-compose.yml
  2. Checked network configuration
  3. Validated service dependencies
- Resolution: Fixed container naming and network configuration in docker-compose.yml 

[ERROR] 2024-01-XX - TypeScript Error: Lucide Icons Type Mismatch

Issue:
- TypeScript errors when using Lucide icons with IconWrapper component
- Error: Type 'LucideIcon' is not assignable to type 'FC<LucideProps>'
- Affects all icon usages in frontend/src/app/page.tsx

Details:
- The IconWrapper component expects an FC<LucideProps> but receives LucideIcon
- Error occurs when passing Lucide icons (Mail, Shield, BarChart3, etc.) to IconWrapper
- Type mismatch between ForwardRefExoticComponent<LucideProps> and FC<LucideProps>

Previous Working Solution:
The wrapper approach worked earlier but broke after TypeScript updates or dependency changes.

Impact:
- Blocking TypeScript compilation
- Affects all icon usages in the landing page
- No runtime impact, purely TypeScript type checking issue

Attempted Solutions:
1. Using LucideIcon type directly - Failed due to type mismatch
2. Using ComponentType<LucideProps> - Failed due to incompatible types
3. Using ForwardRefExoticComponent with RefAttributes - Failed due to type incompatibility

Temporary Solution:
- Added @ts-ignore comments to bypass type checking
- This is a temporary workaround while we investigate the proper type definitions

Next Steps:
1. Create an issue to track this TypeScript error
2. Research Lucide.js documentation for proper type usage
3. Consider upgrading/downgrading Lucide.js version
4. Remove @ts-ignore comments once proper solution is found 