// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Clerk.js User Reference
model UserReference {
  id            String         @id
  email         String         @unique
  organizationId String
  emailAccounts EmailAccount[]
  campaigns     Campaign[]
  prospects     Prospect[]
  masterInbox   MasterInbox?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("users")
}

// Prospect Management
model Prospect {
  id              String       @id @default(cuid())
  email           String       @unique
  firstName       String?
  lastName        String?
  companyName     String?
  industry        String?
  linkedinUrl     String?
  companyWebsite  String?
  phoneNumber     String?
  status          String       @default("new") // new, contacted, replied, converted, dead
  tags            String[]
  customFields    Json?        // For additional custom fields
  campaigns       CampaignProspect[]
  emailReplies    EmailReply[]
  user           UserReference @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("prospects")
}

// Gmail Account Management
model EmailAccount {
  id              String         @id @default(cuid())
  email           String         @unique
  domain          String
  provider        String         @default("gmail")
  dailyQuota      Int           @default(15)
  isActive        Boolean       @default(true)
  lastUsed        DateTime?
  healthScore     Float         @default(100)
  warmupMode      Boolean       @default(true)
  sendingWindow   Json          // { start: "09:00", end: "17:00" }
  minDelaySeconds Int           @default(30)
  maxDelaySeconds Int           @default(120)
  tags            String[]
  user            UserReference  @relation(fields: [userId], references: [id])
  userId          String
  proxy           Proxy?        @relation(fields: [proxyId], references: [id])
  proxyId         String?
  sessions        Session[]
  emailsSent      EmailLog[]
  campaigns       CampaignMailbox[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("email_accounts")
}

// Proxy Management
model Proxy {
  id            String         @id @default(cuid())
  host          String
  port          Int
  username      String?
  password      String?
  protocol      String        @default("http")
  isActive      Boolean       @default(true)
  lastUsed      DateTime?
  location      String?
  emailAccounts EmailAccount[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("proxies")
}

// Browser Session Management
model Session {
  id            String       @id @default(cuid())
  emailAccount  EmailAccount @relation(fields: [emailAccountId], references: [id])
  emailAccountId String
  startTime     DateTime     @default(now())
  endTime       DateTime?
  status        String       @default("active") // active, ended, failed
  fingerprint   Json?        // Browser fingerprint data
  actions       Json[]       // Array of actions performed in session
  performance   Json?        // Performance metrics
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("sessions")
}

// Email Campaign Management
model Campaign {
  id                String       @id @default(cuid())
  name              String
  description       String?
  timezone          String      @default("UTC")
  sendingDays       Int[]       // [1,2,3,4,5] for Mon-Fri, where 0 is Sunday
  sendingWindow     Json        // { start: "09:00", end: "17:00" }
  isActive          Boolean     @default(false)
  status            CampaignStatus @default(DRAFT)
  totalLeads        Int         @default(0)
  activeLeads       Int         @default(0)
  completedLeads    Int         @default(0)
  stoppedLeads      Int         @default(0)
  aiSettings        Json?       // AI reply categorization settings
  user              UserReference @relation(fields: [userId], references: [id])
  userId            String
  sequence          CampaignStep[]
  prospects         CampaignProspect[]
  mailboxes         CampaignMailbox[]
  emailLogs         EmailLog[]
  settings          Json         // Campaign specific settings
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@index([userId])
  @@index([status])
  @@map("campaigns")
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  STOPPED
  COMPLETED
  ARCHIVED
}

// Campaign Steps (Sequence)
model CampaignStep {
  id            String       @id @default(cuid())
  campaign      Campaign     @relation(fields: [campaignId], references: [id])
  campaignId    String
  stepNumber    Int
  name          String      // e.g., "Initial Outreach", "Follow-up 1"
  description   String?
  templates     TemplateVariant[]  // Multiple variants for A/B testing
  delayDays     Int          @default(1)
  delayType     String       @default("business_days") // business_days, calendar_days
  conditions    Json?        // Conditions for sending this step
  isActive      Boolean      @default(true)
  metrics       Json?        // Step-specific metrics
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@unique([campaignId, stepNumber])
  @@index([campaignId])
  @@map("campaign_steps")
}

// Template Variants for A/B Testing
model TemplateVariant {
  id            String          @id @default(cuid())
  name          String
  template      Template        @relation(fields: [templateId], references: [id])
  templateId    String
  campaignStep  CampaignStep    @relation(fields: [campaignStepId], references: [id])
  campaignStepId String
  weight        Int             @default(1)  // For weighted distribution
  isActive      Boolean         @default(true)
  performance   Json?           // Variant performance metrics
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@map("template_variants")
}

// Email Templates
model Template {
  id              String          @id @default(cuid())
  name            String
  description     String?
  subject         String
  body            String
  variables       String[]        // Array of variable names used in template
  variants        TemplateVariant[]
  category        String?         // e.g., "Cold Outreach", "Follow-up"
  tags            String[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([category])
  @@map("templates")
}

// Campaign-Prospect Relationship
model CampaignProspect {
  id            String             @id @default(cuid())
  campaign      Campaign           @relation(fields: [campaignId], references: [id])
  campaignId    String
  prospect      Prospect           @relation(fields: [prospectId], references: [id])
  prospectId    String
  currentStep   Int               @default(0)
  status        ProspectStatus    @default(PENDING)
  sequenceStatus SequenceStatus   @default(NOT_STARTED)
  nextSendDate  DateTime?
  lastSentDate  DateTime?
  stepHistory   Json[]            // Array of step completion data
  customFields  Json?             // Campaign-specific prospect data
  tags          String[]
  notes         ProspectNote[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@unique([campaignId, prospectId])
  @@index([campaignId])
  @@index([status])
  @@index([sequenceStatus])
  @@map("campaign_prospects")
}

enum ProspectStatus {
  PENDING
  ACTIVE
  PAUSED
  STOPPED
  COMPLETED
  BOUNCED
  UNSUBSCRIBED
  REPLIED
  CONVERTED
  ARCHIVED
}

enum SequenceStatus {
  NOT_STARTED
  IN_PROGRESS
  STEP_1
  STEP_2
  STEP_3
  STEP_4
  STEP_5
  COMPLETED
  STOPPED
}

// Prospect Notes
model ProspectNote {
  id                String           @id @default(cuid())
  campaignProspect  CampaignProspect @relation(fields: [campaignProspectId], references: [id])
  campaignProspectId String
  content           String
  type              String          @default("note") // note, system, action
  createdBy         String          // User ID or system
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([campaignProspectId])
  @@map("prospect_notes")
}

// Prospect Lists for Bulk Actions
model ProspectList {
  id            String       @id @default(cuid())
  name          String
  description   String?
  type          String      @default("static") // static, dynamic
  filters       Json?       // For dynamic lists
  sortOrder     Json?       // Sorting configuration
  conditions    Json?       // Additional conditions
  lastRun       DateTime?   // For dynamic lists
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("prospect_lists")
}

// Campaign-Mailbox Assignment
model CampaignMailbox {
  id            String       @id @default(cuid())
  campaign      Campaign     @relation(fields: [campaignId], references: [id])
  campaignId    String
  emailAccount  EmailAccount @relation(fields: [emailAccountId], references: [id])
  emailAccountId String
  isActive      Boolean     @default(true)
  dailyQuota    Int         @default(10)
  customSettings Json?      // Campaign-specific mailbox settings
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([campaignId, emailAccountId])
  @@map("campaign_mailboxes")
}

// Email Tracking
model EmailLog {
  id            String       @id @default(cuid())
  campaign      Campaign     @relation(fields: [campaignId], references: [id])
  campaignId    String
  emailAccount  EmailAccount @relation(fields: [emailAccountId], references: [id])
  emailAccountId String
  recipient     String
  subject       String
  body          String
  status        String       // queued, sending, sent, failed
  sentAt        DateTime?
  error         String?
  metadata      Json?        // Additional sending data
  reply         EmailReply?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("email_logs")
}

// Master Inbox for Reply Management
model MasterInbox {
  id            String       @id @default(cuid())
  email         String      @unique
  user          UserReference @relation(fields: [userId], references: [id])
  userId        String      @unique
  lastChecked   DateTime?
  replies       EmailReply[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("master_inboxes")
}

// Email Replies
model EmailReply {
  id            String       @id @default(cuid())
  masterInbox   MasterInbox @relation(fields: [masterInboxId], references: [id])
  masterInboxId String
  prospect      Prospect    @relation(fields: [prospectId], references: [id])
  prospectId    String
  originalEmail EmailLog    @relation(fields: [emailLogId], references: [id])
  emailLogId    String      @unique
  subject       String
  body          String
  receivedAt    DateTime    @default(now())
  status        String      @default("new") // new, read, replied, archived
  metadata      Json?       // Additional reply data
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("email_replies")
} 